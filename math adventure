<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Math Adventure</title>
    <script src="https://cdn.jsdelivr.net/npm/react@18/umd/react.development.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@babel/standalone/babel.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 min-h-screen">
    <div id="root" class="container mx-auto p-4"></div>

    <script type="text/babel">
        const { useState, useEffect } = React;

        // Expanded topics with 15 categories
        const topics = [
            {
                skill: "Fractions",
                story: "Divide the magical feast!",
                generateQuestion: () => {
                    const num1 = Math.floor(Math.random() * 9) + 1;
                    const den1 = Math.floor(Math.random() * 9) + 2;
                    const num2 = Math.floor(Math.random() * 9) + 1;
                    const den2 = Math.floor(Math.random() * 9) + 2;
                    const lcm = (a, b) => {
                        const gcd = (x, y) => (!y ? x : gcd(y, x % y));
                        return (a * b) / gcd(a, b);
                    };
                    const commonDen = lcm(den1, den2);
                    const newNum1 = num1 * (commonDen / den1);
                    const newNum2 = num2 * (commonDen / den2);
                    const sumNum = newNum1 + newNum2;
                    const correct = `${sumNum}/${commonDen}`;
                    const options = [correct, `${sumNum-1}/${commonDen}`, `${sumNum+1}/${commonDen}`, `${num1+num2}/${den1}`];
                    return {
                        question: `What is ${num1}/${den1} + ${num2}/${den2}?`,
                        options: options.sort(() => Math.random() - 0.5),
                        correct,
                        solution: `Common denominator: ${commonDen}. ${num1}/${den1} = ${newNum1}/${commonDen}, ${num2}/${den2} = ${newNum2}/${commonDen}. Add: ${sumNum}/${commonDen}.`
                    };
                },
                hint: "Find a common denominator."
            },
            {
                skill: "Algebra",
                story: "Unlock the wizard's secrets!",
                generateQuestion: () => {
                    const a = Math.floor(Math.random() * 10) + 1;
                    const b = Math.floor(Math.random() * 20) - 10;
                    const c = Math.floor(Math.random() * 20);
                    const x = (c - b) / a;
                    const correct = `${x}`;
                    const options = [correct, `${x+1}`, `${x-1}`, `${c/a}`];
                    return {
                        question: `Solve: ${a}x ${b >= 0 ? '+' : ''}${b} = ${c}`,
                        options: options.sort(() => Math.random() - 0.5),
                        correct,
                        solution: `${a}x ${b >= 0 ? '+' : ''}${b} = ${c}. Subtract ${b}: ${a}x = ${c-b}. Divide by ${a}: x = ${x}.`
                    };
                },
                hint: "Isolate x with inverse operations."
            },
            {
                skill: "Geometry",
                story: "Measure the sacred temple!",
                generateQuestion: () => {
                    const base = Math.floor(Math.random() * 10) + 1;
                    const height = Math.floor(Math.random() * 10) + 1;
                    const correct = `${(base * height) / 2}`;
                    const options = [correct, `${base * height}`, `${base + height}`, `${correct + 1}`];
                    return {
                        question: `Triangle: base ${base}m, height ${height}m. Area?`,
                        options: options.sort(() => Math.random() - 0.5).map(o => `${o}m²`),
                        correct: `${correct}m²`,
                        solution: `Area = (1/2) × ${base} × ${height} = ${correct}m².`
                    };
                },
                hint: "Area = (1/2) × base × height."
            },
            {
                skill: "Decimals",
                story: "Mix precise elixirs!",
                generateQuestion: () => {
                    const a = (Math.floor(Math.random() * 100) + 1) / 10;
                    const b = (Math.floor(Math.random() * 100) + 1) / 10;
                    const correct = (a * b).toFixed(1);
                    const options = [correct, (a + b).toFixed(1), (a * b + 1).toFixed(1), (a * b - 1).toFixed(1)];
                    return {
                        question: `What is ${a} × ${b}?`,
                        options: options.sort(() => Math.random() - 0.5),
                        correct,
                        solution: `${a} × ${b} = ${a * b}, rounded to ${correct}.`
                    };
                },
                hint: "Multiply, then adjust decimals."
            },
            {
                skill: "Exponents",
                story: "Power the ancient runes!",
                generateQuestion: () => {
                    const base = Math.floor(Math.random() * 4) + 2;
                    const exp1 = Math.floor(Math.random() * 4) + 1;
                    const exp2 = Math.floor(Math.random() * 4) + 1;
                    const correct = Math.pow(base, exp1 + exp2);
                    const options = [correct, Math.pow(base, exp1), Math.pow(base, exp2), correct + 10];
                    return {
                        question: `What is ${base}^${exp1} × ${base}^${exp2}?`,
                        options: options.sort(() => Math.random() - 0.5).map(String),
                        correct: `${correct}`,
                        solution: `${base}^${exp1} × ${base}^${exp2} = ${base}^${exp1+exp2} = ${correct}.`
                    };
                },
                hint: "Add exponents for same bases."
            },
            {
                skill: "Trigonometry",
                story: "Aim the enchanted bow!",
                generateQuestion: () => {
                    const opp = Math.floor(Math.random() * 4) + 1;
                    const hyp = opp + Math.floor(Math.random() * 4) + 1;
                    const adj = Math.sqrt(hyp * hyp - opp * opp);
                    const correct = (adj / hyp).toFixed(2);
                    const options = [correct, (opp / hyp).toFixed(2), (hyp / adj).toFixed(2), (opp / adj).toFixed(2)];
                    return {
                        question: `sin(θ) = ${opp}/${hyp}. cos(θ)?`,
                        options: options.sort(() => Math.random() - 0.5),
                        correct,
                        solution: `sin(θ) = ${opp}/${hyp}. Adjacent = √(${hyp}² - ${opp}²) = ${adj}. cos(θ) = ${adj}/${hyp} = ${correct}.`
                    };
                },
                hint: "Use Pythagorean theorem."
            },
            {
                skill: "Percentages",
                story: "Haggle with the merchant!",
                generateQuestion: () => {
                    const price = Math.floor(Math.random() * 90) + 10;
                    const percent = Math.floor(Math.random() * 50) + 10;
                    const correct = (price * percent / 100).toFixed(2);
                    const options = [correct, (price * percent).toFixed(2), (price / percent).toFixed(2), (price - percent).toFixed(2)];
                    return {
                        question: `${percent}% of ${price}?`,
                        options: options.sort(() => Math.random() - 0.5),
                        correct,
                        solution: `(${percent}/100) × ${price} = ${correct}.`
                    };
                },
                hint: "Convert percent to decimal."
            },
            {
                skill: "Probability",
                story: "Read the oracle's dice!",
                generateQuestion: () => {
                    const favorable = Math.floor(Math.random() * 5) + 1;
                    const total = favorable + Math.floor(Math.random() * 5) + 1;
                    const correct = `${favorable}/${total}`;
                    const options = [correct, `${total}/${favorable}`, `${favorable}/${total+1}`, `${favorable+1}/${total}`];
                    return {
                        question: `${total} marbles, ${favorable} red. Probability?`,
                        options: options.sort(() => Math.random() - 0.5),
                        correct,
                        solution: `${favorable}/${total}.`
                    };
                },
                hint: "Favorable / total outcomes."
            },
            {
                skill: "Calculus",
                story: "Master the sage's rates!",
                generateQuestion: () => {
                    const a = Math.floor(Math.random() * 5) + 1;
                    const b = Math.floor(Math.random() * 10) + 1;
                    const correct = `${a}`;
                    const options = [correct, `${a+b}`, `${b}`, `${a-1}`];
                    return {
                        question: `Derivative of ${a}x + ${b}?`,
                        options: options.sort(() => Math.random() - 0.5),
                        correct,
                        solution: `Derivative of ${a}x + ${b} = ${a}.`
                    };
                },
                hint: "Derivative of ax + b is a."
            },
            {
                skill: "Statistics",
                story: "Analyze the kingdom's data!",
                generateQuestion: () => {
                    const nums = Array(5).fill().map(() => Math.floor(Math.random() * 20) + 1);
                    const correct = (nums.reduce((a, b) => a + b, 0) / 5).toFixed(1);
                    const options = [correct, `${nums[0]}`, `${nums[1]}`, `${correct + 1}`];
                    return {
                        question: `Mean of ${nums.join(', ')}?`,
                        options: options.sort(() => Math.random() - 0.5),
                        correct,
                        solution: `Sum = ${nums.reduce((a, b) => a + b, 0)}. Mean = sum/5 = ${correct}.`
                    };
                },
                hint: "Mean is sum divided by count."
            },
            {
                skill: "Number Theory",
                story: "Decode the ancient primes!",
                generateQuestion: () => {
                    const a = Math.floor(Math.random() * 20) + 1;
                    const b = Math.floor(Math.random() * 20) + 1;
                    const gcd = (x, y) => (!y ? x : gcd(y, x % y));
                    const correct = `${gcd(a, b)}`;
                    const options = [correct, `${a}`, `${b}`, `${a+b}`];
                    return {
                        question: `GCD of ${a} and ${b}?`,
                        options: options.sort(() => Math.random() - 0.5),
                        correct,
                        solution: `GCD of ${a} and ${b} = ${correct} (Euclidean algorithm).`
                    };
                },
                hint: "Use the Euclidean algorithm."
            },
            {
                skill: "Linear Equations",
                story: "Balance the royal scales!",
                generateQuestion: () => {
                    const a = Math.floor(Math.random() * 5) + 1;
                    const b = Math.floor(Math.random() * 10) + 1;
                    const c = Math.floor(Math.random() * 5) + 1;
                    const d = Math.floor(Math.random() * 10) + 1;
                    const x = (d - b) / (a - c);
                    const correct = `${x}`;
                    const options = [correct, `${x+1}`, `${x-1}`, `${b/d}`];
                    return {
                        question: `Solve: ${a}x + ${b} = ${c}x + ${d}`,
                        options: options.sort(() => Math.random() - 0.5),
                        correct,
                        solution: `${a}x + ${b} = ${c}x + ${d}. Subtract ${c}x: ${a-c}x + ${b} = ${d}. Subtract ${b}: ${a-c}x = ${d-b}. x = ${x}.`
                    };
                },
                hint: "Move terms to isolate x."
            },
            {
                skill: "Quadratic Equations",
                story: "Solve the dragon's riddle!",
                generateQuestion: () => {
                    const a = 1;
                    const b = Math.floor(Math.random() * 10) - 5;
                    const c = Math.floor(Math.random() * 10) - 5;
                    const disc = b * b - 4 * a * c;
                    const root1 = (-b + Math.sqrt(disc)) / (2 * a);
                    const correct = root1.toFixed(1);
                    const options = [correct, `${root1+1}`, `${root1-1}`, `${b}`];
                    return {
                        question: `Solve: x² + ${b}x + ${c} = 0 (one root)`,
                        options: options.sort(() => Math.random() - 0.5),
                        correct,
                        solution: `Discriminant = ${b}² - 4×1×${c} = ${disc}. Root = (-${b} + √${disc})/(2×1) = ${correct}.`
                    };
                },
                hint: "Use the quadratic formula."
            },
            {
                skill: "Logarithms",
                story: "Unravel the mystic scrolls!",
                generateQuestion: () => {
                    const base = Math.floor(Math.random() * 4) + 2;
                    const exp = Math.floor(Math.random() * 4) + 1;
                    const correct = `${exp}`;
                    const options = [correct, `${exp+1}`, `${exp-1}`, `${base}`];
                    return {
                        question: `log_${base}(${Math.pow(base, exp)})?`,
                        options: options.sort(() => Math.random() - 0.5),
                        correct,
                        solution: `log_${base}(${Math.pow(base, exp)}) = ${exp}, since ${base}^${exp} = ${Math.pow(base, exp)}.`
                    };
                },
                hint: "Log base b of b^x is x."
            },
            {
                skill: "Sequences",
                story: "Predict the ancient pattern!",
                generateQuestion: () => {
                    const a = Math.floor(Math.random() * 5) + 1;
                    const d = Math.floor(Math.random() * 5) + 1;
                    const n = 5;
                    const correct = `${a + (n-1) * d}`;
                    const options = [correct, `${a + n * d}`, `${a + d}`, `${a}`];
                    return {
                        question: `Arithmetic sequence: ${a}, ${a+d}, ... What's the 5th term?`,
                        options: options.sort(() => Math.random() - 0.5),
                        correct,
                        solution: `nth term = a + (n-1)d. 5th term = ${a} + (5-1)×${d} = ${correct}.`
                    };
                },
                hint: "Use a + (n-1)d for arithmetic sequences."
            }
        ];

        // Main Game Component
        function MathAdventure() {
            const [currentTopic, setCurrentTopic] = useState(0);
            const [currentQuiz, setCurrentQuiz] = useState(0);
            const [score, setScore] = useState(0);
            const [attempts, setAttempts] = useState(0);
            const [showHint, setShowHint] = useState(false);
            const [feedback, setFeedback] = useState("");
            const [showSolution, setShowSolution] = useState(false);
            const [difficulty, setDifficulty] = useState(1);
            const [puzzle, setPuzzle] = useState(topics[0].generateQuestion());

            // Generate new puzzle
            useEffect(() => {
                setPuzzle(topics[currentTopic].generateQuestion());
                setFeedback("");
                setShowHint(false);
                setShowSolution(false);
            }, [currentTopic, currentQuiz]);

            // Adjust difficulty
            useEffect(() => {
                if (attempts > 4 && score < 50 * topics.length) {
                    setDifficulty(Math.max(1, difficulty - 1));
                } else if (attempts <= 2 && score > 0) {
                    setDifficulty(Math.min(3, difficulty + 1));
                }
            }, [score, attempts]);

            const handleAnswer = (answer) => {
                setAttempts(attempts + 1);
                if (answer === puzzle.correct) {
                    setScore(score + 1);
                    setFeedback("Correct! Well done!");
                    setShowSolution(false);
                } else {
                    setFeedback("Incorrect! Here's why:");
                    setShowSolution(true);
                }
            };

            const goToNext = () => {
                if (currentQuiz < 49) {
                    setCurrentQuiz(currentQuiz + 1);
                } else if (currentTopic < topics.length - 1) {
                    setCurrentTopic(currentTopic + 1);
                    setCurrentQuiz(0);
                }
            };

            const goToPrevious = () => {
                if (currentQuiz > 0) {
                    setCurrentQuiz(currentQuiz - 1);
                } else if (currentTopic > 0) {
                    setCurrentTopic(currentTopic - 1);
                    setCurrentQuiz(49);
                }
            };

            const current = topics[currentTopic];

            return (
                <div className="max-w-3xl mx-auto bg-white rounded-lg shadow-lg p-6">
                    <h1 className="text-3xl font-bold text-center text-blue-600 mb-4">
                        Math Adventure
                    </h1>
                    <div className="mb-4">
                        <p className="text-lg text-gray-700">Topic: {current.skill} (Quiz {currentQuiz + 1}/50)</p>
                        <p className="text-md italic text-gray-500">{current.story}</p>
                    </div>

                    <div className="bg-gray-50 p-4 rounded-lg mb-4">
                        <p className="text-xl font-semibold">{puzzle.question}</p>
                        <div className="grid grid-cols-2 gap-2 mt-4">
                            {puzzle.options.map((option, idx) => (
                                <button
                                    key={idx}
                                    onClick={() => handleAnswer(option)}
                                    className="bg-blue-500 text-white p-2 rounded hover:bg-blue-600 transition"
                                >
                                    {option}
                                </button>
                            ))}
                        </div>
                    </div>

                    <div className="mb-4 flex gap-4">
                        <button
                            onClick={() => setShowHint(!showHint)}
                            className="bg-yellow-500 text-white p-2 rounded hover:bg-yellow-600"
                        >
                            {showHint ? "Hide Hint" : "Show Hint"}
                        </button>
                        <button
                            onClick={goToPrevious}
                            disabled={currentTopic === 0 && currentQuiz === 0}
                            className="bg-gray-500 text-white p-2 rounded hover:bg-gray-600 disabled:bg-gray-300 disabled:cursor-not-allowed"
                        >
                            Back
                        </button>
                        <button
                            onClick={goToNext}
                            disabled={currentTopic === topics.length - 1 && currentQuiz === 49}
                            className="bg-gray-500 text-white p-2 rounded hover:bg-gray-600 disabled:bg-gray-300 disabled:cursor-not-allowed"
                        >
                            Next
                        </button>
                    </div>

                    {feedback && (
                        <div className="text-center">
                            <p className={`text-lg ${feedback.includes("Correct") ? "text-green-600" : "text-red-600"}`}>
                                {feedback}
                            </p>
                            {showSolution && (
                                <p className="mt-2 text-gray-700">{puzzle.solution}</p>
                            )}
                        </div>
                    )}

                    <div className="mt-4 text-center">
                        <p>Score: {score}/{topics.length * 50}</p>
                        <p>Difficulty Level: {difficulty}</p>
                        {currentTopic === topics.length - 1 && currentQuiz === 49 && score === topics.length * 50 && (
                            <p className="text-2xl text-green-600 font-bold mt-2">
                                Congratulations! You've conquered all math realms!
                            </p>
                        )}
                    </div>
                </div>
            );
        }

        // Render the app
        const root = ReactDOM.createRoot(document.getElementById('root'));
        root.render(<MathAdventure />);
    </script>
</body>
</html>
